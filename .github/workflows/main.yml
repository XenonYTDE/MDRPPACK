name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  INPUT_GAME: "hoi4"
  INPUT_RULES: "https://github.com/Kaiserreich/cwtools-hoi4-config.git"
  INPUT_RULESREF: "master"
  INPUT_SUPPRESSEDOFFENCECATEGORIES: '{"failure":["CW226"], "warning":["CW251"], "notice":[]}'

jobs:
  codingstandards:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Run Coding Standards
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: python tools/coding_standards.py $GITHUB_TOKEN

  CWTools_CI:
    runs-on: ubuntu-latest
    needs: [codingstandards]
    if: always()
    container:
      image: mcr.microsoft.com/dotnet/sdk:6.0
      options: --user root

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run CWTools validation
        run: |
          cd $HOME/cwtools
          dotnet tool install -g cwtools.cli
          mkdir -p $HOME/cwtools/cwtools-cache-files
          export PATH="$PATH:$HOME/.dotnet/tools"
          export DOTNET_CLI_HOME="$HOME/cwtools"
          export DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=true
          
          # First run to generate cache
          cwtools validate --directory $GITHUB_WORKSPACE --game ${{ env.INPUT_GAME }} --rulespath ${{ env.INPUT_RULES }} --cachefile $HOME/cwtools/cwtools-cache-files/cache.cwb --reporttype json
          
          # Second run to validate and generate output
          cwtools validate --directory $GITHUB_WORKSPACE --game ${{ env.INPUT_GAME }} --rulespath ${{ env.INPUT_RULES }} --cachefile $HOME/cwtools/cwtools-cache-files/cache.cwb --reporttype json > output.json
          
          # Check if output.json exists and is valid
          if [ -s "output.json" ]; then
            ruby lib/cwtools.rb
          else
            echo "No validation output generated"
            exit 1
          fi

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: CWTools Build Output
          path: output.json

  styling:
    runs-on: ubuntu-latest
    needs: [CWTools_CI]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check Basic Style
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: python tools/check_basic_style_2.py $GITHUB_TOKEN

  fixingstyling:
    runs-on: ubuntu-latest
    needs: [styling]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Git
        run: sudo apt-get install -y git

      - name: Fix Styling
        run: python tools/fix_styling.py

      - name: Commit and Push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git remote set-url origin https://$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY.git
          git add -A
          git commit -m 'Fixed Styling for you'
          git push -u origin HEAD:$GITHUB_REF_NAME

  create_release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Release for ${{ github.ref }} from ${{ github.sha }}
          draft: false
          prerelease: false