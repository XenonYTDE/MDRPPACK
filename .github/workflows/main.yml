name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  INPUT_GAME: "hoi4"  # Set the game to HOI4
  INPUT_RULES: "https://github.com/Kaiserreich/cwtools-hoi4-config.git"
  INPUT_RULESREF: "master"
  INPUT_SUPPRESSEDOFFENCECATEGORIES: '{"failure":["CW226"], "warning":["CW251"], "notice":[]}'

jobs:
  codingstandards:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Coding Standards
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: python tools/coding_standards.py $GITHUB_TOKEN

  CWTools_CI:
    runs-on: ubuntu-latest
    needs: [codingstandards]
    if: always()
    permissions:
      contents: write
    container:
      image: ubuntu:latest
      options: --user root

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install basic dependencies
        run: |
          apt-get update
          apt-get install -y curl git

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Pull CWTools Action Validator
        run: |
          # Create working directory in user space
          mkdir -p $HOME/cwtools
          cd $HOME/cwtools
          
          # Clone and setup CWTools
          git clone https://github.com/cwtools/cwtools-action.git .
          
          # Install required packages including ICU
          apt-get update
          apt-get install -y wget ruby ruby-dev build-essential libicu-dev icu-devtools
          
          # Setup environment
          export PATH="$PATH:$HOME/.dotnet/tools"
          export GITHUB_WORKSPACE=${{ github.workspace }}
          export DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=true
          
          # Create directories
          mkdir -p /src /cwtools-cache-files
          export SRC_DIR=/src

      - name: Setup .NET Core 3.0
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '3.0.x'
          
      - name: Run CWTools validation
        run: |
          cd $HOME/cwtools
          wget -O - -q https://raw.githubusercontent.com/cwtools/cwtools-action/v1.0.0/lib/gitlab_setup.sh | sh -s

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: CWTools Build Output
          path: output.json

  styling:
    runs-on: ubuntu-latest
    needs: [CWTools_CI]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check Basic Style
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: python tools/check_basic_style_2.py $GITHUB_TOKEN

  fixingstyling:
    runs-on: ubuntu-latest
    needs: [styling]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Git
        run: sudo apt-get install -y git

      - name: Fix Styling
        run: python tools/fix_styling.py

      - name: Commit and Push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git remote set-url origin https://$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY.git
          git add -A
          git commit -m 'Fixed Styling for you'
          git push -u origin HEAD:$GITHUB_REF_NAME

  create_releaseable:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create a Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Release for ${{ github.ref }} from ${{ github.sha }}
          draft: false
          prerelease: false
